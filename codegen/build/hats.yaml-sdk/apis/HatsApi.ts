/* tslint:disable */
/* eslint-disable */
/**
 * Hat API
 * These endpoints are for the hat decorator API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HatResponseDTO,
    HatResponseDTOFromJSON,
    HatResponseDTOToJSON,
} from '../models';

export interface PutHatOnRequest {
    body?: Blob;
}

/**
 * no description
 */
export class HatsApi extends runtime.BaseAPI {

    /**
     * Returns a url to your avatar with a hat
     */
    async putHatOnRaw(requestParameters: PutHatOnRequest): Promise<runtime.ApiResponse<HatResponseDTO>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.body !== undefined) {
            formParams.append('body', requestParameters.body as any);
        }

        const response = await this.request({
            path: `/hat`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => HatResponseDTOFromJSON(jsonValue));
    }

    /**
     * Returns a url to your avatar with a hat
     */
    async putHatOn(requestParameters: PutHatOnRequest): Promise<HatResponseDTO> {
        const response = await this.putHatOnRaw(requestParameters);
        return await response.value();
    }

}
